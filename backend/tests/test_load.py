import asyncio
import time
import random
from typing import List, Tuple, Dict

import httpx
from rich.console import Console
from rich.table import Table

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–ê ---
# URL —Ç–≤–æ–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
API_URL = "http://79.143.29.56:8000/api/predict"
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
CONCURRENT_REQUESTS = 100
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
MAX_RESPONSE_TIME_SEC = 1.0
# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π.
TEST_PAYLOADS: List[Dict[str, str]] = [
    {"input": "—Å–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ"},
    {"input": "–∏–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏–∑ –ú–ê–ò"},
    {"input": "–î–µ—Ç–µ–∫—Ü–∏—è –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–µ–Ω –Ω–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–∞—Ö"},
    {"input": ""},  # –¢–µ—Å—Ç –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
]
# -------------------------

console = Console()

async def send_request(client: httpx.AsyncClient, request_id: int) -> Tuple[int, float, bool]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å, –∏–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (id –∑–∞–ø—Ä–æ—Å–∞, –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, —Ñ–ª–∞–≥ —É—Å–ø–µ—Ö–∞).
    """
    start_time = time.perf_counter()
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    payload = random.choice(TEST_PAYLOADS)
    
    try:
        response = await client.post(API_URL, json=payload, timeout=10.0)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π (HTTP 2xx)
        
        # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ---
        response_data = response.json()
        if not isinstance(response_data, list):
            raise TypeError(f"–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º (list), –ø–æ–ª—É—á–µ–Ω–æ: {type(response_data)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ–π—Å–∞ —Å –ø—É—Å—Ç—ã–º –≤–≤–æ–¥–æ–º
        if payload["input"] == "" and response_data != []:
            raise ValueError("–î–ª—è –ø—É—Å—Ç–æ–≥–æ `input` –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º `[]`")
        
        end_time = time.perf_counter()
        response_time = end_time - start_time
        
        console.print(f"–ó–∞–ø—Ä–æ—Å [bold cyan]#{request_id}[/bold cyan] (input: '{payload['input']}') –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ [bold green]{response_time:.4f}c[/bold green]")
        return (request_id, response_time, True)

    except httpx.HTTPStatusError as e:
        end_time = time.perf_counter()
        response_time = end_time - start_time
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ #{request_id}:[/bold red] –°—Ç–∞—Ç—É—Å {e.response.status_code} –∑–∞ {response_time:.4f}c")
        return (request_id, response_time, False)
        
    except (Exception, TypeError, ValueError) as e:
        end_time = time.perf_counter()
        response_time = end_time - start_time
        console.print(f"[bold red]–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞/–æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ #{request_id}:[/bold red] {e} –∑–∞ {response_time:.4f}c")
        return (request_id, response_time, False)


async def run_load_test():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞.
    """
    console.print(f"[bold yellow]üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç...[/bold yellow]")
    console.print(f"–¶–µ–ª—å: [bold cyan]{CONCURRENT_REQUESTS}[/bold cyan] –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ [bold magenta]{API_URL}[/bold magenta]")
    
    async with httpx.AsyncClient() as client:
        tasks = [send_request(client, i) for i in range(1, CONCURRENT_REQUESTS + 1)]
        results: List[Tuple[int, float, bool]] = await asyncio.gather(*tasks)

    analyze_results(results)


def analyze_results(results: List[Tuple[int, float, bool]]):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É.
    """
    successful_requests = [res for res in results if res[2]]
    failed_requests = [res for res in results if not res[2]]
    
    response_times = [res[1] for res in successful_requests]
    slow_requests = [res for res in successful_requests if res[1] > MAX_RESPONSE_TIME_SEC]

    # --- –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É ---
    table = Table(title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
    table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan", no_wrap=True)
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta")

    table.add_row("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", str(len(results)))
    table.add_row("–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", f"[green]{len(successful_requests)}[/green]")
    table.add_row("–ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", f"[red]{len(failed_requests)}[/red]")
    
    if response_times:
        avg_time = sum(response_times) / len(response_times)
        max_time = max(response_times)
        min_time = min(response_times)
        table.add_row("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{avg_time:.4f} —Å–µ–∫")
        table.add_row("–ú–∞–∫—Å. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{max_time:.4f} —Å–µ–∫")
        table.add_row("–ú–∏–Ω. –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{min_time:.4f} —Å–µ–∫")

    table.add_row(f"–ó–∞–ø—Ä–æ—Å—ã –¥–æ–ª—å—à–µ {MAX_RESPONSE_TIME_SEC} —Å–µ–∫", f"[yellow]{len(slow_requests)}[/yellow]")
    
    console.print(table)
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    if failed_requests:
        console.print("[bold red]‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.[/bold red]")
    elif slow_requests:
        console.print(f"[bold yellow]‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —Å –∑–∞–º–µ—á–∞–Ω–∏—è–º–∏: {len(slow_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤ {MAX_RESPONSE_TIME_SEC} —Å–µ–∫.[/bold yellow]")
    else:
        console.print("[bold green]‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω! –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—ã—Å—Ç—Ä—ã–µ –∏ —É—Å–ø–µ—à–Ω—ã–µ.[/bold green]")


if __name__ == "__main__":
    asyncio.run(run_load_test())