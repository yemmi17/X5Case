import asyncio
import time
import statistics
import random
from typing import List, Tuple, Dict

import httpx
from rich.console import Console
from rich.table import Table

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ï–°–¢–ê ---
# URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
API_URL = "http://79.143.29.56:8000/api/predict"

# –¶–µ–ª–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å–Ω—ã–π –ø–æ—Ç–æ–∫ (RPS) –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
TARGET_RPS = 100  # —Ü–µ–ª–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Å–µ–∫—É–Ω–¥—É
TEST_DURATION_SEC = 20  # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—á—Ç–æ–±—ã –Ω–µ —É—à–ª–∏ –≤ —Ç—ã—Å—è—á–Ω—ã–µ –≤ –ø–æ–ª—ë—Ç–µ)
MAX_IN_FLIGHT = 200

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ–∫)
REQUEST_TIMEOUT_SEC = 5.0

# –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π.
TEST_PAYLOADS: List[Dict[str, str]] = [
    {"input": "—Å–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ"},
    {"input": "–∏–Ω–∂–µ–Ω–µ—Ä-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏–∑ –ú–ê–ò"},
    {"input": "–î–µ—Ç–µ–∫—Ü–∏—è –Ω–µ—Ñ—Ç—è–Ω—ã—Ö –ø—è—Ç–µ–Ω –Ω–∞ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–∞—Ö"},
    {"input": ""},  # –¢–µ—Å—Ç –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
]
# -------------------------

console = Console()


async def send_request(client: httpx.AsyncClient, sem: asyncio.Semaphore, request_id: int) -> Tuple[int, float, bool]:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å, –∏–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (id –∑–∞–ø—Ä–æ—Å–∞, –≤—Ä–µ–º—è, —É—Å–ø–µ—Ö)
    """
    start = time.perf_counter()
    payload = random.choice(TEST_PAYLOADS)
    
    async with sem:
        try:
            resp = await client.post(API_URL, json=payload, timeout=REQUEST_TIMEOUT_SEC)
            resp.raise_for_status()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            response_data = resp.json()
            if not isinstance(response_data, list):
                raise TypeError(f"–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {type(response_data)}")
            if payload["input"] == "" and response_data != []:
                raise ValueError("–î–ª—è –ø—É—Å—Ç–æ–≥–æ `input` –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º `[]`")

            elapsed = time.perf_counter() - start
            return (request_id, elapsed, True)
        except Exception as e:
            # –õ—é–±–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (HTTP –æ—à–∏–±–∫–∞, —Ç–∞–π–º–∞—É—Ç, –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏) —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–≤–∞–ª–æ–º
            elapsed = time.perf_counter() - start
            # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –æ—à–∏–±–æ–∫
            # console.print(f"[dim red]–ó–∞–ø—Ä–æ—Å #{request_id} –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}[/dim red]")
            return (request_id, elapsed, False)


async def run_rps_test():
    """–û—Ç–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å –Ω–∞–≥—Ä—É–∑–∫–∏: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π RPS —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–æ—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."""
    console.print(f"[bold yellow]üöÄ –°—Ç–∞—Ä—Ç RPS-—Ç–µ—Å—Ç–∞[/bold yellow]: —Ü–µ–ª–µ–≤–æ–π –ø–æ—Ç–æ–∫ [bold cyan]{TARGET_RPS} rps[/bold cyan] –≤ —Ç–µ—á–µ–Ω–∏–µ [bold cyan]{TEST_DURATION_SEC}s[/bold cyan]")

    interval = 1.0 / float(TARGET_RPS)
    end_at = time.perf_counter() + TEST_DURATION_SEC

    results: List[Tuple[int, float, bool]] = []
    tasks: List[asyncio.Task] = []
    sem = asyncio.Semaphore(MAX_IN_FLIGHT)

    request_counter = 0
    next_scheduled = time.perf_counter()

    async with httpx.AsyncClient() as client:
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –Ω—É–∂–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º, –ø–æ–∫–∞ –Ω–µ –≤—ã–π–¥–µ—Ç –≤—Ä–µ–º—è
        while True:
            now = time.perf_counter()
            if now >= end_at:
                break

            # –ï—Å–ª–∏ –ø–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å ‚Äî –¥–µ–ª–∞–µ–º —ç—Ç–æ —Å—Ä–∞–∑—É
            if now >= next_scheduled:
                request_counter += 1
                tasks.append(asyncio.create_task(send_request(client, sem, request_counter)))
                next_scheduled += interval
            else:
                # –°–ø–∏–º –¥–æ –º–æ–º–µ–Ω—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ—Ç–∞ (–∫–æ—Ä–æ—Ç–∫–∏–π —Å–æ–Ω –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–Ω–æ–º–∏–∏ CPU)
                await asyncio.sleep(min(0.0005, max(0.0, next_scheduled - now)))

        # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if tasks:
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—á–∫–∞–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö gather
            for chunk_start in range(0, len(tasks), 1000):
                chunk = tasks[chunk_start:chunk_start + 1000]
                results.extend(await asyncio.gather(*chunk))

    analyze_results_rps(results, scheduled=request_counter)


def percentile(values: List[float], p: float) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è."""
    if not values:
        return 0.0
    idx = max(0, min(len(values) - 1, int(round((p / 100.0) * (len(values) - 1)))))
    return sorted(values)[idx]


def analyze_results_rps(results: List[Tuple[int, float, bool]], scheduled: int):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã RPS-—Ç–µ—Å—Ç–∞."""
    successes = [r for r in results if r[2]]
    failures = [r for r in results if not r[2]]
    latencies = [r[1] for r in successes]

    total_completed = len(results)
    total_success = len(successes)
    total_failed = len(failures)

    achieved_rps = total_completed / TEST_DURATION_SEC if TEST_DURATION_SEC > 0 else 0.0

    table = Table(title="üìà RPS-—Ç–µ—Å—Ç ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    table.add_column("–ú–µ—Ç—Ä–∏–∫–∞", style="cyan", no_wrap=True)
    table.add_column("–ó–Ω–∞—á–µ–Ω–∏–µ", style="magenta")

    table.add_row("–ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", str(scheduled))
    table.add_row("–ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", str(total_completed))
    table.add_row("–£—Å–ø–µ—à–Ω—ã—Ö", f"[green]{total_success}[/green]")
    table.add_row("–ù–µ—É—Å–ø–µ—à–Ω—ã—Ö", f"[red]{total_failed}[/red]")
    table.add_row("–î–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–π RPS", f"{achieved_rps:.2f} (—Ü–µ–ª—å: {TARGET_RPS})")

    if latencies:
        table.add_row("--- –ó–∞–¥–µ—Ä–∂–∫–∏ (Latency) ---", "---")
        table.add_row("–°—Ä–µ–¥–Ω—è—è", f"{statistics.mean(latencies):.4f} c")
        table.add_row("–ú–µ–¥–∏–∞–Ω–∞ (p50)", f"{percentile(latencies, 50):.4f} c")
        table.add_row("p90", f"{percentile(latencies, 90):.4f} c")
        table.add_row("p95", f"{percentile(latencies, 95):.4f} c")
        table.add_row("p99", f"{percentile(latencies, 99):.4f} c")
        table.add_row("–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞", f"{max(latencies):.4f} c")

    console.print(table)


if __name__ == "__main__":
    asyncio.run(run_rps_test())